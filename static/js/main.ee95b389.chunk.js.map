{"version":3,"sources":["components/ImageLinkForm/ImageLinkForm.js","components/FaceRecongnition/FaceRecongnition.js","App.js","reportWebVitals.js","index.js"],"names":["ImageLinkForm","onInputChange","onSubmitChange","className","type","onChange","placeholder","onClick","FaceRecognition","input","box","id","alt","src","width","height","map","value","key","style","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","particlesOptions","particles","number","density","enable","value_area","shape","opacity","random","app","Clarifai","App","apiKey","process","calculateFaceLocation","data","regions","outputs","i","length","boxValue","region_info","bounding_box","image","document","getElementById","Number","push","top_row","left_col","bottom_row","right_col","displayFaceBox","setState","e","target","onUpload","models","initModel","FACE_DETECT_MODEL","then","generalModel","predict","state","response","console","log","catch","params","this","FaceRecongnition","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.ee95b389.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ImageLinkForm.css\";\r\nconst ImageLinkForm = ({ onInputChange, onSubmitChange }) => {\r\n  return (\r\n    <div className=\"ma4 mt0\">\r\n      <p className=\"f3\">\r\n        {\"This Magic  Brain will detect faces in your pictures, Give it a try!\"}\r\n      </p>\r\n      <div className=\"center\">\r\n        <div className=\" form center pa4 br3 shadow-5\">\r\n          <input\r\n            className=\"f4 pa2 w-70 center\"\r\n            type=\"text\"\r\n            onChange={onInputChange}\r\n            placeholder=\"Post url here\"\r\n          />\r\n          <button\r\n            onClick={onSubmitChange}\r\n            className=\"btn w-30 grow f4 link ph3 pv dib white\"\r\n          >\r\n            Detect\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageLinkForm;\r\n","import React from \"react\";\r\nimport \"./FaceRcongnition.css\";\r\n\r\nconst FaceRecognition = ({ input, box }) => {\r\n  return (\r\n    <div className=\"center ma\">\r\n      <div className=\"absolute mt2\">\r\n        <img id=\"inputImage\" alt=\" \" src={input} width=\"500px\" height=\"auto\" />\r\n        {box.map((value, key) => {\r\n          return (\r\n            <div\r\n              className=\"bounding-box\"\r\n              style={{\r\n                top: value.topRow,\r\n                right: value.rightCol,\r\n                bottom: value.bottomRow,\r\n                left: value.leftCol,\r\n              }}\r\n              key={key}\r\n            ></div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FaceRecognition;\r\n","import React, { Component } from \"react\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport FaceRecongnition from \"./components/FaceRecongnition/FaceRecongnition\";\nimport Particles from \"react-particles-js\";\nimport Clarifai from \"clarifai\";\nimport \"./App.css\";\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 80,\n      density: {\n        enable: false,\n        value_area: 200,\n      },\n    },\n    shape: {\n      type: \"star\",\n    },\n    opacity: {\n      random: true,\n    },\n  },\n};\n\nconst apiKey = process.env.REACT_APP_API_KEY;\nconst app = new Clarifai.App({ apiKey: apiKey });\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: \"\",\n      box: [],\n    };\n  }\n  calculateFaceLocation = (data) => {\n    const regions = data.outputs[0].data.regions;\n    let box = [];\n    for (let i = 0; i < regions.length; i++) {\n      const boxValue = regions[i].region_info.bounding_box;\n      const image = document.getElementById(\"inputImage\");\n      const width = Number(image.width);\n      const height = Number(image.height);\n      box.push({\n        topRow: boxValue.top_row * height,\n        leftCol: boxValue.left_col * width,\n        bottomRow: height - boxValue.bottom_row * height,\n        rightCol: width - boxValue.right_col * width,\n      });\n    }\n    return { box };\n  };\n\n  displayFaceBox = (box) => {\n    this.setState({ box: box.box });\n  };\n  onInputChange = (e) => {\n    this.setState({ input: e.target.value });\n  };\n\n  onUpload = (e) => {\n    this.setState({ input: e.target.value });\n  };\n  onSubmitChange = () => {\n    app.models\n      .initModel({\n        id: Clarifai.FACE_DETECT_MODEL,\n      })\n      .then((generalModel) => {\n        return generalModel.predict(this.state.input);\n      })\n      .then((response) => {\n        console.log(response);\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      })\n      .catch((e) => console.log(e));\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Particles className=\"particles\" params={particlesOptions} />\n        <ImageLinkForm\n          onInputChange={this.onInputChange}\n          onSubmitChange={this.onSubmitChange}\n          onUpload={this.onUpload}\n        />\n        <FaceRecongnition box={this.state.box} input={this.state.input} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"tachyons\";\n\nReactDOM.render(\n  <App />,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}